// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  daily: (where?: DailyWhereInput) => Promise<boolean>;
  game: (where?: GameWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  daily: (where: DailyWhereUniqueInput) => DailyNullablePromise;
  dailies: (args?: {
    where?: DailyWhereInput;
    orderBy?: DailyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Daily>;
  dailiesConnection: (args?: {
    where?: DailyWhereInput;
    orderBy?: DailyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DailyConnectionPromise;
  game: (where: GameWhereUniqueInput) => GameNullablePromise;
  games: (args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Game>;
  gamesConnection: (args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GameConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDaily: (data: DailyCreateInput) => DailyPromise;
  updateDaily: (args: {
    data: DailyUpdateInput;
    where: DailyWhereUniqueInput;
  }) => DailyPromise;
  updateManyDailies: (args: {
    data: DailyUpdateManyMutationInput;
    where?: DailyWhereInput;
  }) => BatchPayloadPromise;
  upsertDaily: (args: {
    where: DailyWhereUniqueInput;
    create: DailyCreateInput;
    update: DailyUpdateInput;
  }) => DailyPromise;
  deleteDaily: (where: DailyWhereUniqueInput) => DailyPromise;
  deleteManyDailies: (where?: DailyWhereInput) => BatchPayloadPromise;
  createGame: (data: GameCreateInput) => GamePromise;
  updateGame: (args: {
    data: GameUpdateInput;
    where: GameWhereUniqueInput;
  }) => GamePromise;
  updateManyGames: (args: {
    data: GameUpdateManyMutationInput;
    where?: GameWhereInput;
  }) => BatchPayloadPromise;
  upsertGame: (args: {
    where: GameWhereUniqueInput;
    create: GameCreateInput;
    update: GameUpdateInput;
  }) => GamePromise;
  deleteGame: (where: GameWhereUniqueInput) => GamePromise;
  deleteManyGames: (where?: GameWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  daily: (
    where?: DailySubscriptionWhereInput
  ) => DailySubscriptionPayloadSubscription;
  game: (
    where?: GameSubscriptionWhereInput
  ) => GameSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GameOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "home_ASC"
  | "home_DESC"
  | "away_ASC"
  | "away_DESC"
  | "country_ASC"
  | "country_DESC"
  | "prediction_ASC"
  | "prediction_DESC"
  | "outcome_ASC"
  | "outcome_DESC"
  | "kickoff_ASC"
  | "kickoff_DESC";

export type DailyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface GameUpdateManyWithoutDailyInput {
  create?: Maybe<GameCreateWithoutDailyInput[] | GameCreateWithoutDailyInput>;
  delete?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  connect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  set?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  disconnect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  update?: Maybe<
    | GameUpdateWithWhereUniqueWithoutDailyInput[]
    | GameUpdateWithWhereUniqueWithoutDailyInput
  >;
  upsert?: Maybe<
    | GameUpsertWithWhereUniqueWithoutDailyInput[]
    | GameUpsertWithWhereUniqueWithoutDailyInput
  >;
  deleteMany?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
  updateMany?: Maybe<
    GameUpdateManyWithWhereNestedInput[] | GameUpdateManyWithWhereNestedInput
  >;
}

export type DailyWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GameUpdateWithoutDailyDataInput {
  home?: Maybe<String>;
  away?: Maybe<String>;
  country?: Maybe<String>;
  prediction?: Maybe<String>;
  outcome?: Maybe<String>;
  kickoff?: Maybe<DateTimeInput>;
}

export interface GameWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  home?: Maybe<String>;
  home_not?: Maybe<String>;
  home_in?: Maybe<String[] | String>;
  home_not_in?: Maybe<String[] | String>;
  home_lt?: Maybe<String>;
  home_lte?: Maybe<String>;
  home_gt?: Maybe<String>;
  home_gte?: Maybe<String>;
  home_contains?: Maybe<String>;
  home_not_contains?: Maybe<String>;
  home_starts_with?: Maybe<String>;
  home_not_starts_with?: Maybe<String>;
  home_ends_with?: Maybe<String>;
  home_not_ends_with?: Maybe<String>;
  away?: Maybe<String>;
  away_not?: Maybe<String>;
  away_in?: Maybe<String[] | String>;
  away_not_in?: Maybe<String[] | String>;
  away_lt?: Maybe<String>;
  away_lte?: Maybe<String>;
  away_gt?: Maybe<String>;
  away_gte?: Maybe<String>;
  away_contains?: Maybe<String>;
  away_not_contains?: Maybe<String>;
  away_starts_with?: Maybe<String>;
  away_not_starts_with?: Maybe<String>;
  away_ends_with?: Maybe<String>;
  away_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  prediction?: Maybe<String>;
  prediction_not?: Maybe<String>;
  prediction_in?: Maybe<String[] | String>;
  prediction_not_in?: Maybe<String[] | String>;
  prediction_lt?: Maybe<String>;
  prediction_lte?: Maybe<String>;
  prediction_gt?: Maybe<String>;
  prediction_gte?: Maybe<String>;
  prediction_contains?: Maybe<String>;
  prediction_not_contains?: Maybe<String>;
  prediction_starts_with?: Maybe<String>;
  prediction_not_starts_with?: Maybe<String>;
  prediction_ends_with?: Maybe<String>;
  prediction_not_ends_with?: Maybe<String>;
  outcome?: Maybe<String>;
  outcome_not?: Maybe<String>;
  outcome_in?: Maybe<String[] | String>;
  outcome_not_in?: Maybe<String[] | String>;
  outcome_lt?: Maybe<String>;
  outcome_lte?: Maybe<String>;
  outcome_gt?: Maybe<String>;
  outcome_gte?: Maybe<String>;
  outcome_contains?: Maybe<String>;
  outcome_not_contains?: Maybe<String>;
  outcome_starts_with?: Maybe<String>;
  outcome_not_starts_with?: Maybe<String>;
  outcome_ends_with?: Maybe<String>;
  outcome_not_ends_with?: Maybe<String>;
  kickoff?: Maybe<DateTimeInput>;
  kickoff_not?: Maybe<DateTimeInput>;
  kickoff_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  kickoff_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  kickoff_lt?: Maybe<DateTimeInput>;
  kickoff_lte?: Maybe<DateTimeInput>;
  kickoff_gt?: Maybe<DateTimeInput>;
  kickoff_gte?: Maybe<DateTimeInput>;
  daily?: Maybe<DailyWhereInput>;
  AND?: Maybe<GameWhereInput[] | GameWhereInput>;
  OR?: Maybe<GameWhereInput[] | GameWhereInput>;
  NOT?: Maybe<GameWhereInput[] | GameWhereInput>;
}

export interface GameCreateInput {
  id?: Maybe<ID_Input>;
  home: String;
  away: String;
  country: String;
  prediction: String;
  outcome?: Maybe<String>;
  kickoff?: Maybe<DateTimeInput>;
  daily?: Maybe<DailyCreateOneWithoutGamesInput>;
}

export interface GameUpdateManyWithWhereNestedInput {
  where: GameScalarWhereInput;
  data: GameUpdateManyDataInput;
}

export interface GameUpsertWithWhereUniqueWithoutDailyInput {
  where: GameWhereUniqueInput;
  update: GameUpdateWithoutDailyDataInput;
  create: GameCreateWithoutDailyInput;
}

export interface DailySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DailyWhereInput>;
  AND?: Maybe<DailySubscriptionWhereInput[] | DailySubscriptionWhereInput>;
  OR?: Maybe<DailySubscriptionWhereInput[] | DailySubscriptionWhereInput>;
  NOT?: Maybe<DailySubscriptionWhereInput[] | DailySubscriptionWhereInput>;
}

export interface DailyCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  games?: Maybe<GameCreateManyWithoutDailyInput>;
}

export interface DailyUpsertWithoutGamesInput {
  update: DailyUpdateWithoutGamesDataInput;
  create: DailyCreateWithoutGamesInput;
}

export interface GameCreateManyWithoutDailyInput {
  create?: Maybe<GameCreateWithoutDailyInput[] | GameCreateWithoutDailyInput>;
  connect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
}

export interface DailyUpdateOneWithoutGamesInput {
  create?: Maybe<DailyCreateWithoutGamesInput>;
  update?: Maybe<DailyUpdateWithoutGamesDataInput>;
  upsert?: Maybe<DailyUpsertWithoutGamesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<DailyWhereUniqueInput>;
}

export interface GameCreateWithoutDailyInput {
  id?: Maybe<ID_Input>;
  home: String;
  away: String;
  country: String;
  prediction: String;
  outcome?: Maybe<String>;
  kickoff?: Maybe<DateTimeInput>;
}

export type GameWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface DailyUpdateInput {
  name?: Maybe<String>;
  games?: Maybe<GameUpdateManyWithoutDailyInput>;
}

export interface DailyCreateOneWithoutGamesInput {
  create?: Maybe<DailyCreateWithoutGamesInput>;
  connect?: Maybe<DailyWhereUniqueInput>;
}

export interface DailyUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface GameUpdateManyMutationInput {
  home?: Maybe<String>;
  away?: Maybe<String>;
  country?: Maybe<String>;
  prediction?: Maybe<String>;
  outcome?: Maybe<String>;
  kickoff?: Maybe<DateTimeInput>;
}

export interface GameScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  home?: Maybe<String>;
  home_not?: Maybe<String>;
  home_in?: Maybe<String[] | String>;
  home_not_in?: Maybe<String[] | String>;
  home_lt?: Maybe<String>;
  home_lte?: Maybe<String>;
  home_gt?: Maybe<String>;
  home_gte?: Maybe<String>;
  home_contains?: Maybe<String>;
  home_not_contains?: Maybe<String>;
  home_starts_with?: Maybe<String>;
  home_not_starts_with?: Maybe<String>;
  home_ends_with?: Maybe<String>;
  home_not_ends_with?: Maybe<String>;
  away?: Maybe<String>;
  away_not?: Maybe<String>;
  away_in?: Maybe<String[] | String>;
  away_not_in?: Maybe<String[] | String>;
  away_lt?: Maybe<String>;
  away_lte?: Maybe<String>;
  away_gt?: Maybe<String>;
  away_gte?: Maybe<String>;
  away_contains?: Maybe<String>;
  away_not_contains?: Maybe<String>;
  away_starts_with?: Maybe<String>;
  away_not_starts_with?: Maybe<String>;
  away_ends_with?: Maybe<String>;
  away_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  prediction?: Maybe<String>;
  prediction_not?: Maybe<String>;
  prediction_in?: Maybe<String[] | String>;
  prediction_not_in?: Maybe<String[] | String>;
  prediction_lt?: Maybe<String>;
  prediction_lte?: Maybe<String>;
  prediction_gt?: Maybe<String>;
  prediction_gte?: Maybe<String>;
  prediction_contains?: Maybe<String>;
  prediction_not_contains?: Maybe<String>;
  prediction_starts_with?: Maybe<String>;
  prediction_not_starts_with?: Maybe<String>;
  prediction_ends_with?: Maybe<String>;
  prediction_not_ends_with?: Maybe<String>;
  outcome?: Maybe<String>;
  outcome_not?: Maybe<String>;
  outcome_in?: Maybe<String[] | String>;
  outcome_not_in?: Maybe<String[] | String>;
  outcome_lt?: Maybe<String>;
  outcome_lte?: Maybe<String>;
  outcome_gt?: Maybe<String>;
  outcome_gte?: Maybe<String>;
  outcome_contains?: Maybe<String>;
  outcome_not_contains?: Maybe<String>;
  outcome_starts_with?: Maybe<String>;
  outcome_not_starts_with?: Maybe<String>;
  outcome_ends_with?: Maybe<String>;
  outcome_not_ends_with?: Maybe<String>;
  kickoff?: Maybe<DateTimeInput>;
  kickoff_not?: Maybe<DateTimeInput>;
  kickoff_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  kickoff_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  kickoff_lt?: Maybe<DateTimeInput>;
  kickoff_lte?: Maybe<DateTimeInput>;
  kickoff_gt?: Maybe<DateTimeInput>;
  kickoff_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
  OR?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
  NOT?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
}

export interface GameUpdateManyDataInput {
  home?: Maybe<String>;
  away?: Maybe<String>;
  country?: Maybe<String>;
  prediction?: Maybe<String>;
  outcome?: Maybe<String>;
  kickoff?: Maybe<DateTimeInput>;
}

export interface DailyWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  games_every?: Maybe<GameWhereInput>;
  games_some?: Maybe<GameWhereInput>;
  games_none?: Maybe<GameWhereInput>;
  AND?: Maybe<DailyWhereInput[] | DailyWhereInput>;
  OR?: Maybe<DailyWhereInput[] | DailyWhereInput>;
  NOT?: Maybe<DailyWhereInput[] | DailyWhereInput>;
}

export interface GameUpdateWithWhereUniqueWithoutDailyInput {
  where: GameWhereUniqueInput;
  data: GameUpdateWithoutDailyDataInput;
}

export interface DailyUpdateWithoutGamesDataInput {
  name?: Maybe<String>;
}

export interface GameSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GameWhereInput>;
  AND?: Maybe<GameSubscriptionWhereInput[] | GameSubscriptionWhereInput>;
  OR?: Maybe<GameSubscriptionWhereInput[] | GameSubscriptionWhereInput>;
  NOT?: Maybe<GameSubscriptionWhereInput[] | GameSubscriptionWhereInput>;
}

export interface DailyCreateWithoutGamesInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface GameUpdateInput {
  home?: Maybe<String>;
  away?: Maybe<String>;
  country?: Maybe<String>;
  prediction?: Maybe<String>;
  outcome?: Maybe<String>;
  kickoff?: Maybe<DateTimeInput>;
  daily?: Maybe<DailyUpdateOneWithoutGamesInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface GamePreviousValues {
  id: ID_Output;
  home: String;
  away: String;
  country: String;
  prediction: String;
  outcome?: String;
  kickoff?: DateTimeOutput;
}

export interface GamePreviousValuesPromise
  extends Promise<GamePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  home: () => Promise<String>;
  away: () => Promise<String>;
  country: () => Promise<String>;
  prediction: () => Promise<String>;
  outcome: () => Promise<String>;
  kickoff: () => Promise<DateTimeOutput>;
}

export interface GamePreviousValuesSubscription
  extends Promise<AsyncIterator<GamePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  home: () => Promise<AsyncIterator<String>>;
  away: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  prediction: () => Promise<AsyncIterator<String>>;
  outcome: () => Promise<AsyncIterator<String>>;
  kickoff: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DailyEdge {
  node: Daily;
  cursor: String;
}

export interface DailyEdgePromise extends Promise<DailyEdge>, Fragmentable {
  node: <T = DailyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DailyEdgeSubscription
  extends Promise<AsyncIterator<DailyEdge>>,
    Fragmentable {
  node: <T = DailySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DailySubscriptionPayload {
  mutation: MutationType;
  node: Daily;
  updatedFields: String[];
  previousValues: DailyPreviousValues;
}

export interface DailySubscriptionPayloadPromise
  extends Promise<DailySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DailyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DailyPreviousValuesPromise>() => T;
}

export interface DailySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DailySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DailySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DailyPreviousValuesSubscription>() => T;
}

export interface Game {
  id: ID_Output;
  home: String;
  away: String;
  country: String;
  prediction: String;
  outcome?: String;
  kickoff?: DateTimeOutput;
}

export interface GamePromise extends Promise<Game>, Fragmentable {
  id: () => Promise<ID_Output>;
  home: () => Promise<String>;
  away: () => Promise<String>;
  country: () => Promise<String>;
  prediction: () => Promise<String>;
  outcome: () => Promise<String>;
  kickoff: () => Promise<DateTimeOutput>;
  daily: <T = DailyPromise>() => T;
}

export interface GameSubscription
  extends Promise<AsyncIterator<Game>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  home: () => Promise<AsyncIterator<String>>;
  away: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  prediction: () => Promise<AsyncIterator<String>>;
  outcome: () => Promise<AsyncIterator<String>>;
  kickoff: () => Promise<AsyncIterator<DateTimeOutput>>;
  daily: <T = DailySubscription>() => T;
}

export interface GameNullablePromise
  extends Promise<Game | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  home: () => Promise<String>;
  away: () => Promise<String>;
  country: () => Promise<String>;
  prediction: () => Promise<String>;
  outcome: () => Promise<String>;
  kickoff: () => Promise<DateTimeOutput>;
  daily: <T = DailyPromise>() => T;
}

export interface GameSubscriptionPayload {
  mutation: MutationType;
  node: Game;
  updatedFields: String[];
  previousValues: GamePreviousValues;
}

export interface GameSubscriptionPayloadPromise
  extends Promise<GameSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GamePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GamePreviousValuesPromise>() => T;
}

export interface GameSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GameSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GameSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GamePreviousValuesSubscription>() => T;
}

export interface Daily {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DailyPromise extends Promise<Daily>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  games: <T = FragmentableArray<Game>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DailySubscription
  extends Promise<AsyncIterator<Daily>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  games: <T = Promise<AsyncIterator<GameSubscription>>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DailyNullablePromise
  extends Promise<Daily | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  games: <T = FragmentableArray<Game>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DailyPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DailyPreviousValuesPromise
  extends Promise<DailyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DailyPreviousValuesSubscription
  extends Promise<AsyncIterator<DailyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DailyConnection {
  pageInfo: PageInfo;
  edges: DailyEdge[];
}

export interface DailyConnectionPromise
  extends Promise<DailyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DailyEdge>>() => T;
  aggregate: <T = AggregateDailyPromise>() => T;
}

export interface DailyConnectionSubscription
  extends Promise<AsyncIterator<DailyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DailyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDailySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGame {
  count: Int;
}

export interface AggregateGamePromise
  extends Promise<AggregateGame>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGameSubscription
  extends Promise<AsyncIterator<AggregateGame>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateDaily {
  count: Int;
}

export interface AggregateDailyPromise
  extends Promise<AggregateDaily>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDailySubscription
  extends Promise<AsyncIterator<AggregateDaily>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GameConnection {
  pageInfo: PageInfo;
  edges: GameEdge[];
}

export interface GameConnectionPromise
  extends Promise<GameConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GameEdge>>() => T;
  aggregate: <T = AggregateGamePromise>() => T;
}

export interface GameConnectionSubscription
  extends Promise<AsyncIterator<GameConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GameEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGameSubscription>() => T;
}

export interface GameEdge {
  node: Game;
  cursor: String;
}

export interface GameEdgePromise extends Promise<GameEdge>, Fragmentable {
  node: <T = GamePromise>() => T;
  cursor: () => Promise<String>;
}

export interface GameEdgeSubscription
  extends Promise<AsyncIterator<GameEdge>>,
    Fragmentable {
  node: <T = GameSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Daily",
    embedded: false
  },
  {
    name: "Game",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
